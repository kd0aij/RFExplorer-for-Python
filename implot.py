#pylint: disable=trailing-whitespace, line-too-long, bad-whitespace, invalid-name, R0204, C0200
#pylint: disable=superfluous-parens, missing-docstring, broad-except
#pylint: disable=too-many-lines, too-many-instance-attributes, too-many-statements, too-many-nested-blocks
#pylint: disable=too-many-branches, too-many-public-methods, too-many-locals, too-many-arguments

#============================================================================
# plot CSV file generated by rfe.py
#============================================================================

import numpy as np
import matplotlib
#matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import os

nscans = -1

files = os.listdir('.')
sigfiles = []
tfiles = []
for fname in sorted(files):
  print(fname)
  index = fname.find('.csv')
  if (index == 19):
      sigfiles.append(fname)
  elif (index == 21):
      tfiles.append(fname)

index = 0
for fname in sigfiles:
  print('{0:02d}: {1:s}'.format(index, fname.split('.')[0]))
  index += 1        

istart = input("starting index: ")
iend = input("ending index: ")

strdata = ''
for index in range(int(istart), int(iend)+1):
  print(sigfiles[index])
  infile = open(sigfiles[index], 'r')
  strdata += infile.read()
  
strlines = strdata.split('\n')
fields = strlines[0].split(',')
nfreq = len(fields) - 12
print('{0:d} frequency bins'.format(nfreq))

nrecs = len(strlines)
# check for empty lines at end of file
for rec in range(nrecs-1,-1,-1):
  if (len(strlines[rec].split(',')) == (nfreq+12)):
    break
  else:
    nrecs -= 1
print('{0:d} scans'.format(nrecs))
maxscans = nrecs

data = np.zeros(nfreq)
scanTime = fields[0].split('.')[0]
datetime = fields[0].split(' ')
startdate = datetime[0]
starttime = datetime[1].split('.')[0]
startFreq = float(fields[2])
endFreq = float(fields[5])

fields = strlines[nrecs-1].split(',')
datetime = fields[0].split(' ')
enddate = datetime[0]
endtime = datetime[1].split('.')[0]

# for each record in the file
for rec in range(nrecs):
  fields = strlines[rec].split(',')
  nfreq = len(fields) - 12
  
  for bin in range(nfreq):
    data[bin] = float(fields[12+bin])

  # init plotdata to minimum amplitude of first scan
  if (nscans == -1):
    nscans += 1
    minAmp = data[0]
    for col in range(nfreq):
        if (minAmp > data[col]):
            minAmp = data[col]
            
        plotdata = np.full((maxscans,nfreq), minAmp)

  # slide image down one scanline
  peakAmp = -200
  for row in range(maxscans-2, -1, -1):
    for col in range(nfreq):
        amp = plotdata[row, col]
        plotdata[row+1, col] = amp
        if (peakAmp < amp):
            peakAmp = amp
            peakCol = col
        if (minAmp > amp):
            minAmp = amp

  # add data at top of image
  for col in range(nfreq):
    amp = data[col]
    plotdata[0, col] = amp
    if (peakAmp < amp):
        peakAmp = amp
        peakCol = col
    if (minAmp > amp):
        minAmp = amp
                   
  nscans += 1

deltaFreq = (endFreq - startFreq) / nfreq

#plt.close()
fig, ax = plt.subplots(num=1, figsize=(8,8))
plt.imshow(plotdata,interpolation='nearest',cmap="hot")
plt.xlabel('MHz')
plt.ylabel('minutes')

locs,labels = plt.xticks()                
labels = ['{0:.1f}'.format(startFreq+locs[iTick]*deltaFreq) for iTick in range(len(labels))]
ax.set_xticklabels(labels)

tickIntvl = 6
locs = range(0,maxscans,tickIntvl)
ax.set_yticks(locs)
labels = ['{0:d}'.format(iTick) for iTick in range(len(locs))]
ax.set_yticklabels(labels)

peakFreq = startFreq + (peakCol * deltaFreq)
plt.title('{2:s}\npeak amp: {0:.1f}, freq: {1:.1f}'.format(peakAmp, peakFreq, str(scanTime).split('.')[0]))

plt.show(block=True)
plt.savefig("RFimage.png")


